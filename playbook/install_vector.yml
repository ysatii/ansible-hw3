---
- name: Install and configure Vector
  hosts: all
  become: yes
  vars:
    vector_version: "0.34.0"
    vector_download_url: "https://packages.timber.io/vector/0.34.0/vector-0.34.0-x86_64-unknown-linux-gnu.tar.gz"
    vector_install_path: "/usr/local/bin/vector"
    vector_config_path: "/etc/vector/vector.toml"
    vector_user: "vector"

  tasks:
    - name: Ensure necessary directories exist
      file:
        path: "{{ item }}"
        state: directory
        owner: "{{ vector_user }}"
        group: "{{ vector_user }}"
        mode: "0755"
      loop:
        - "/var/lib/vector"
        - "/etc/vector"

    - name: Download Vector
      get_url:
        url: "{{ vector_download_url }}"
        dest: "/tmp/vector.tar.gz"

    - name: Extract Vector
      unarchive:
        src: "/tmp/vector.tar.gz"
        dest: "/tmp"
        remote_src: yes
        mode: "0755"

    - name: Move Vector binary to /usr/local/bin
      command: mv /tmp/vector-x86_64-unknown-linux-gnu/bin/vector {{ vector_install_path }}
      args:
        creates: "{{ vector_install_path }}"

    - name: Ensure Vector is executable
      file:
        path: "{{ vector_install_path }}"
        mode: "0755"

    - name: Ensure Vector user exists
      user:
        name: "{{ vector_user }}"
        system: yes
        createhome: no
        shell: /bin/false

    - name: Deploy Vector configuration for ClickHouse
      template:
        src: templates/vector_clickhouse.toml.j2
        dest: "{{ vector_config_path }}"
        mode: "0644"
      when: "'clickhouse' in group_names"
      notify: Restart Vector

    - name: Deploy Vector configuration for Nginx/Lighthouse
      template:
        src: templates/vector_nginx_lighthouse.toml.j2
        dest: "{{ vector_config_path }}"
        mode: "0644"
      when: "'nginx-lighthouse' in group_names"
      notify: Restart Vector

    - name: Deploy Vector systemd service file
      copy:
        dest: /etc/systemd/system/vector.service
        content: |
          [Unit]
          Description=Vector service
          After=network.target

          [Service]
          User={{ vector_user }}
          ExecStart={{ vector_install_path }} --config {{ vector_config_path }}
          Restart=always
          RestartSec=5

          [Install]
          WantedBy=multi-user.target
      notify: Restart Vector

    - name: Enable and start Vector service
      systemd:
        name: vector
        enabled: yes
        state: started

  handlers:
    - name: Restart Vector
      systemd:
        name: vector
        state: restarted
